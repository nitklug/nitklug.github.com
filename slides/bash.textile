---
title: shellscripting/1
author: shashi gowda
layout: slideshow
email: ur1.ca/9nb0
company: nitk-lug
date: 2010/10/02
brushes: [ Bash ]
slides :
 - h1(vcenter). hi!

 - h1(vcenter). learn bash scripting in 30 mins
 - h1(vcenter). learn programming in 30 mins
 - h1(vcenter). FAIL
 - <div class="vcenter">
   *you can never finish, you can only start and keep getting better* -- me
   </div>
 - h1(vcenter). ok dude, what do you want?
 - h1(vcenter). i want you to leave!
 - h1(vcenter). ...get up and run! don't stop.
 - h1(vcenter). i want you to want to learn it all.
 - h1(vcenter). and feel good
 - |
   <div class="vcenter hcenter">
   h2. agenda

   * some know-what
   * awesomeness
   * some know-how
   * questions
   * appendix
   * awesomeness

   </div>

 - h1(vcenter). bash?
 - h1(vcenter). bourne-again shell?
 - h1(vcenter). bourne shell
 - h1(vcenter). bourne?
 - h1(vcenter). some guy
 - h1(vcenter). ok, shell?
 - h1(vcenter). OS?
 - h1(vcenter). OS = kernel + some programs
 - h1(vcenter). kernel?
 - h1(vcenter). nevermind, it's boring
 - h1(vcenter). fine, programs?
 - h1(vcenter). they do something
 - h1(vcenter). srsly, what's shell?
 - h1(vcenter). it's a program
 - h1(vcenter). it helps run programs
 - h1(vcenter). also a programming language, of sorts
 - h1(vcenter). what's special about this bash, shell. thing.
 - h1(vcenter). it's the default shell in most linux systems
 - h1(vcenter). linux?
 - h1(vcenter). unix-like.
 - h1(vcenter). unix?
 - h1(vcenter). OS? anything more?
 - h1(vcenter). with some philosophies...
 - h2(hcenter vcenter). "Write programs that do one thing and do it well. Write programs to work together." -- Doug McIlroy
 - h2(vcenter). shell is what helps you make the programs work well together.
 - h1(vcenter). shell is the glue.
 - h1(vcenter). bash is fevicol.
 - h1(vcenter). it's everywhere.
 - h1(vcenter). it's customizable (lmgtfy.com?q=customizing+bash)
 - h1(vcenter). it stalks you. etc.
 - h1(vcenter). "shell is a way of mind." -- me
 - |
   h1. what does it look like?

   <pre class="brush: bash">
   tweet() 
       read password
       curl -u shashi:$password \
           http://twitter.com/api/1/statuses/update.xml -d "status_text=$1"
   </pre>

   <pre class="brush: bash">
   #!/bin/bash
   # phew.

   grep "$1" -irc . | sort -nrt ':' -k 2 | head -15 | sed s/:.*$//

   </pre>
   ^ unix tool chain ftw!
   <pre class="brush: bash">
   #!/usr/bin/env bash

   echo "NICK shbot
   USER $(whoami) +iw shbot :$0
   JOIN "#lug-nitk" >> shellbot.input

   tail -f shellbot.input | telnet irc.freenode.net 6667 | \
      while true
      do read LINE || break

         echo $LINE
         if echo $LINE | egrep "shbot: ping$" &> /dev/null
         then echo "PRIVMSG #lug-nitk :pong" >> shellbot.input
         fi
      done
   </pre>

   <pre class="brush: bash">
   while true; do xdotool click 1; done
   </pre>
   ^ aybabtu!

 - h1(vcenter). what the...
 - h1(vcenter). let's dive in
 - h1(vcenter). invoking
   applications -- accessories -- terminal
   /bin/bash script_file_name
 - |
   h1. the atom

   <pre class="brush: bash">
   echo 'Hello, World!'
   </pre>

   <pre class="brush: bash">
   echo Hello, World!
   </pre>

   <pre class="brush: bash">
   echo Hello,          World!
   </pre>

   <pre class="brush: bash">
   echo -e Hello,          World!
   </pre>

   <pre class="brush: bash">
   find . -name "file_pattern" -exec rm -rf {} \;
   </pre>

 - |
   h1. structure of a command

   <pre class="brush: bash">
   program_name some arguments -option1 -option2 "argument for option2" more arguments "for the" command
   </pre>
 - |
   h1. what's a bash script?

   * it's just a bunch of bash commands
   * it's like a batch file in windows, but only, more turing complete

   a bash script file has the following form:
   <pre class="brush: bash">
   #!/bin/bash
   ....
   # commands
   ....
   </pre>

   the first line is not a command, it tells that the file is a bash script
 - |
   h1. goo and the pipes


   * commands give out goo
   * some take and mix goo and give out more goo
   * pipes connect two commands so they can transfer and process goo
   * text is goo, for now

 - |
   h1. pipes?

   * yeah, they connect commands, their input and output.
   * how do pipes look?
   * like bugs in your code

   > < | >> tee
 - |
   h2. >

   put ouput to a file

   <pre class="brush: bash">
   echo 'Hello, World!' > hello_file
   cat hello_file     # cat reads a file
   </pre>
 - |
   h2. <

   read a file and use its content as input
   <pre class="brush: bash">
   cowsay < hello_file
   </pre>
 - |
   h2. |

   sends the output of the command to the left as the input of command to the right
   <pre class="brush: bash">
   echo 'Moo. Moo!' | cowsay
   </pre>
 - |
   h2. >>

   appends output to a file
   <pre class="brush: bash">
   cowsay < hello_file >> hello_ascii
   </pre>
 - |
   h2. tee

   a T-joint in the pipes. one input two outputs
   <pre class="brush: bash">
   echo 'Hello, there!' | tee hello_file | cowsay
   </pre>

 - |
   h1. the standard files

   h2. /dev/tty

   <pre class="brush: bash">
   cat hello_file > /dev/tty
   </pre>
   /dev/tty by default is the screen, anything you pipe there comes on the screen

   h2. /dev/stdin

   <pre class="brush: bash">
   cat /dev/stdin
   </pre>
 - |
   h2. /dev/null

   <pre class="brush: bash">
   cat hello_file > /dev/null
   </pre>
   /dev/null is a blackhole

 - |
   h1. more fun files

   h2. /dev/audio

   legend has it that you can hear god!

   <pre class="brush: bash">
   cat /vmlinuz > /dev/audio
   </pre>

   <pre class="brush: bash">
   cat /dev/audio > /tmp/myvoice
   </pre>

   <pre class="brush: bash">
   cat /tmp/myvoice > /dev/audio
   </pre>

   h2. /dev/*
 - |
   h1. how pipes work?

   * the actual programs that read and write text just use the standard input and output
   * in other words they just do simple printf scanf calls
   * to redirect input and output is the job of the shell
   * so how does it do it?

 - |
   h1. here's how:

   consider,
   <pre class="brush: bash">
   program1 < input_file | program2 | program3
   </pre>

   * the shell first reads the pipe characters like <, >, |, >> etc
   * it then sets up the operation they stand for
   * then *parallelly* execute the programs (in a separate instance of the shell for each program)
   so before anything happens:
   * program3 is started and made to wait for program2's output
   * program2 is started and made to wait for program1's output
   * program1 is started and made to wait for input_file to be read
   * as the input file is read
   ** program1 devours it and spits output
   ** program2 immediately grabs program1's output and gives more output
   ** program3 then uses program2's output
   * all of this happens without program1, 2, 3 knowing where the input is coming from or the output is going to.
   * it's the job of the shell to pipe them
   * the shell is awesome

 - h1(vcenter). ok, all you taught us till now is how to make cows say stuff. where is the good stuff?

 - h1(vcenter). i can make cows think too!

 - |
   <pre class="vcenter brush: bash">
   echo Look ma'!' I\'m thinking'!' | cowthink
    ________________________
   ( Look ma! I'm thinking! )
    ========================
           o   ^__^
            o  (oo)\_______
               (__)\       )\/\
                   ||____w |
                   ||     ||
   </pre>

 - h1(vcenter). srsly?
 - |
   h1. what other stuff do programs give out other than goo?

   * programs give out an exit status after they finish
   * exit status is an integer from 0 to 255
   * 0 means win!
   * anything else means a fail of some sort.
 - h1(vcenter). how do i use these exit statuses?
 - |
   h1. execution control

   * conditional operators
   * the if block
   * the [
   * the while loop
 - h1(vcenter). condtions
 - |
   h2. &&

   && stands for *and*

   <pre class="brush: bash">
   this_is_boring && kill_me
   </pre>
   * it basically returns the exit status of the second command (i.e kill me) if the first one succeeds, if it doesn't it returns the exit status of the first command (this_is_boring)
   * so, if the first one fails it wont execute the second one
   * so, this is basically saying kill me if this is boring
   * you can do a lot more if you use a ()
   <pre class="brush: bash">
   this_is_boring && ( kill_me && walk_out )
   </pre>

 - |
   h1. ||

   <pre class="brush: bash">
   call_me || text_me
   </pre>

   * || returns the exit status of the second command only if the first command fails
   * this says "text me if calling doesn't work"

   you can even,

   <pre class="brush: bash">
    ( kill_me && walk_out ) || ( sit_down && listen )
   </pre>
 - |
   h1. the if block

   * the if block has this form:
   <pre class="brush: bash">
    if some_command; do
       # do something
    fi
   </pre>

 - |
   h1. the while loop

   * the while loop has this form:
   <pre class="brush: bash">
    while something_is_true; do
       # do something
    done
   </pre>

 - |
   h1. [
   * it's an alias for test
   * can be used to check conditions
   * some options -e -ne -gt -lt -f -d -z
   ** = => equals
   ** -ne => not equal to
   ** -lt => less than # rmember? < is a pipe
   ** -gt => greater than
   ** -e  => does Sa file/directory exist
   ** -f  => does a file exist
   ** -d  => does a directory exist
   ** -z is the string zero length?

   * see @man [@

   for examples see this:http://www.ibm.com/developerworks/library/l-bash-test.html
 - |
   h1. the for loop

   * a typical for loop has this form:
   <pre class="brush: bash">
    for VARNAME in {1...$N}; do
       # do something using VARNAME
    done
    
    #OR
    
    for VARNAME in a b c 1 2 3 h a s; do
       # do something using VARNAME
    done
   </pre>
 - |
   h1. a quick look at variables

   h2. assigning a variable

   * string is the only datastructure in bash!

   <pre class="brush: bash">
       var_name=somestring
       echo $var_name
       var_name=`command`  #puts the output of the command in the variable
   </pre>

 - h1(vcenter). leap of faith, let's go to "#43":#43 and try to understand
 - h1(vcenter). we're done
 - h1(vcenter). no seriously, *we* are done
 - h1(vcenter). now it's your turn
 - h1(vcenter). go rtfm
 - h1(vcenter). appendix
 - h1(vcenter). the unix toolchain
 - h1(vcenter). the unix guru's toolchain
 - |
   h1. the unix guru's toolchain

   * grep -- finds goo
   * sed  -- stream editor
   * awk  -- a full-blown programming language
   * sort -- sorts goo
   * and other programs of sorts..

 - h1(vcenter). the unix user's toolchain

 - |
   h1. the unix user's toolchain


   * man

   man's everything you need to know.
   so run @man man@ to find out what it is.

 - |
   h1. a to-read list

   <pre class="brush: bash">
   man man
   man bash
   man apropos
   man info
   man [
   man grep
   man sed
   man expr
   man grep
   man awk
   </pre>

 - h1(vcenter). questions?
 - h1(vcenter). thank you.
---
