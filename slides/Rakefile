require "rubygems"
require "redcloth"
require "yaml"

ENV['slippydir']  ||= 'slippy'
ENV['stylesheet'] ||= 'slippy-pure.css'
ENV['template']   ||= ENV['slippydir'] + '/template.html'
ENV['sourcedir']  ||= 'source'
ENV['outputdir']  ||= 'html'
ENV['browser']    ||= 'google-chrome'

desc "The default target: build html files out of the source textile files."
task :default => [:build, :browse]

task :build do |t, args|
    if args then
        files = args
    end

    i_files = Dir[ ENV['sourcedir'] + "/*.textile" ]
    for fn in i_files do
        tex = ''
        open(fn) { |f| tex = f.read }
        opts = ENV
        file_opts = YAML::load(tex)
        tex = remove_yaml(tex)
        tex = split_slides(tex)
        tex = RedCloth.new(tex)
        opts.update("content" => tex.to_html)
        opts.update(file_opts) if file_opts.class == Hash
        fn.gsub!(ENV['sourcedir'], ENV['outputdir']).gsub! '.textile', '.html'
        o_file = open(fn, 'w') do |f|
            f.write(apply_template(opts))
        end
    end
end

task :browse do
    sh "#{ENV['browser']} #{ENV['outputdir']}"
end

def apply_template (opts)

    template = nil
    open(opts['template'] || ENV['template']) { |f| template = f.read }

    if !template then
        throw "No template file."
    end
    tmp = template

    opts.each do |key, value|
        tmp.gsub! /\%\{#{ key.to_s}\}/ , value
    end

    tmp.gsub! /\%\{[A-Za-z0-9_]+\}/, ''
    tmp
end

def remove_yaml(text)
    yaml_on = false
    stripped = ''

    text.each_line do |l|
        yaml_on = !yaml_on if l.strip == '---'
        stripped += l if !yaml_on && l.strip != '---'
    end

    stripped
end

def split_slides(text)
    slide_sep = %Q{

    </div>

    <div class="slide">}

    text.gsub! ("\n***\n", slide_sep)

    text = %Q{
    <div class="slide">
    #{text}
    </div>

    }
end
